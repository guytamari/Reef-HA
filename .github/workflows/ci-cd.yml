name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init  -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                          -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                          -backend-config="region=${{ secrets.AWS_REGION }}"
          terraform apply -auto-approve

      - name: Set Terraform Outputs to GitHub ENV
        run: |
          echo "ECR_REPOSITORY=$(terraform output -raw ecr_repository_name)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV

      - name: Build, Tag, and Push Docker image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG

      - name: Update ECS Service with new image
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

# check2
# -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID}}" \
# -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY}}" \
